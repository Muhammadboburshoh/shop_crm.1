create table admins(
  id int generated by default as identity primary key,
  user_id int references users(id),
  role int default 0
);
create table teacher(
  id int generated by default as identity primary key,
  user_id int references users(id),
  status text default 't'
);

create or replace function test(username text, v int) returns int language plpgsql as $$
  declare 
   id int;
  begin
    insert into users(username) values(username) returns id;
    if v = 0 or v = 1 then
      return id;
    end if;
      return 2;
  end;
$$;

CASE 
      WHEN 'a' >= 0 select 'ok';
END;

create or replace function hello() returns varchar language plpgsql as $$
  begin
    return 'abdulloh';
  end;
$$;

create or replace function age1(val varchar) returns int language plpgsql as $$
  begin
    return extract('year' from current_timestamp)::int - extract('year' from cast(val as date))::int;
  end;
$$;

create or replace function find_age(age int) returns table(
  id int,
  username text,
  user_age int,
  data json
) language plpgsql as $$

  begin
    return query select u.id, u.username, u.user_age, u.data from users as u where u.user_age > age;
  end;

$$;

create table user1(
  id int,
  username text
);


create function audit() returns trigger language plpgsql as $$
  begin
    insert into user1(username) values (OLD.username);
    return OLD;
  end;
$$;

create trigger user_audit before delete on users for each row execute procedure audit();










select
  p.id as id,
  p.name as name,
  p.barcode as barcode,
  p.description as description,
  sum(pi.count)::integer as count,
  (select pi.markup_price from product_items where pi.status not in ('I')),
  max(pi.status)
from
  products as p
join
  product_items as pi on pi.product_id = p.id
group by
  p.id,
  p.name,
  p.description
order by
  p.id;


select
  p.id as id,
  p.name as name,
  p.barcode as barcode,
  p.description as description,
  array_agg(pi.id) as pi_id,
  array_agg(pi.count) as count,
  array_agg(pi.original_price) as original_price,
  array_agg(pi.markup_price) as markup_price,
  array_agg(pi.status)::[] as status
from
  products as p
left join
  product_items as pi on pi.product_id = p.id
group by
  p.id,
  p.name,
  p.description;




select
  p.id as id,
  p.name as name,
  p.barcode as barcode,
  p.description as description,
  p.sale_price as sale_price,
  p.user_id as p_user_id,
  p.created_at as p_created_at,
  array_agg(pi.id) as pi_id,
  array_agg(pi.count) as count,
  array_agg(pi.original_price) as original_price,
  array_agg(pi.created_at) as pi_created_at
from
  products as p
left join
  product_items as pi on pi.product_id = p.id
where
  p.is_delete = false as pi.is_delete = false
group by
  p.id,
  p.name,
  p.barcode,
  p.description,
  p.sale_price,
  p.user_id,
  p.created_at,